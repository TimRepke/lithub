import type { DataType, TypeMap } from "apache-arrow/type";
import type { Type } from "apache-arrow/enum";
import { type Table, tableFromIPC } from "apache-arrow";
import { GET, request } from "@/util/api.ts";
import { feature, type WorldAtlas } from "topojson";
import { geoPath, geoNaturalEarth1 } from "d3-geo";
import type { GeometryCollection } from "topojson-specification";
import type { FeatureCollection, GeometryObject } from "geojson";
import { GeoProjection } from "d3";

export interface CountryProp {
  name: string;
}

export interface SlimPlacesSchema extends TypeMap {
  idx: DataType<Type.Uint32>;
  country_num: DataType<Type.Uint16>;
}

export interface FullPlacesSchema extends TypeMap {
  idx: DataType<Type.Uint32>;
  geonameid: DataType<Type.Uint32>;
  country_num: DataType<Type.Uint16>;
  lat: DataType<Type.Float16>;
  lon: DataType<Type.Float16>;
  name: DataType<Type.Utf8>;
  // class: DataType<Type.Utf8>;
  // code: DataType<Type.Utf8>;
  feature: DataType<Type.Uint16>;
}

export interface SlimData {
  counts: Record<number, number>;
  documents: Record<number, number[]>;
}

export interface FullEntry {
  idx: number;
  geonameid: number;
  country_num: number;
  lat: number;
  lon: number;
  name: string;
  // class: string;
  // code: string;
  feature: number;
}

export type ProjectedEntry = Omit<FullEntry, "idx"> & { xy: [number, number]; count: number; idxs: number[] };

export type ProjectedEntry_ = FullEntry & { xy: [number, number] | null };
export type ProjectedEntry__ = FullEntry & { xy: [number, number] };

export function translateSlimTable(table: Table<SlimPlacesSchema>): SlimData {
  const idxs = table.getChild("idx")!;
  const countries = table.getChild("country_num")!;
  const { numRows } = table;
  const counts: Record<number, number> = {};
  const documents: Record<number, number[]> = {};
  let _country: number;
  let _idx: number;
  for (let i = 0; i < numRows; i++) {
    _country = countries.get(i);
    _idx = idxs.get(i);
    if (!(_country in counts)) {
      counts[_country] = 1;
      documents[_country] = [_idx];
    } else {
      counts[_country] += 1;
      documents[_country].push(_idx);
    }
  }
  return { counts, documents };
}

export function translateFullTable(
  table: Table<FullPlacesSchema>,
  projection: GeoProjection,
): Record<number, ProjectedEntry_[]> {
  const ret: Record<number, ProjectedEntry_[]> = {};
  let loc: FullEntry;
  for (const row of table) {
    loc = row.toJSON();
    if (loc.country_num in ret) ret[loc.country_num].push({ xy: projection([loc.lon, loc.lat]), ...loc });
    else ret[loc.country_num] = [{ xy: projection([loc.lon, loc.lat]), ...loc }];
  }
  return ret;
}

export type Countries = FeatureCollection<GeometryObject, CountryProp>;

// export type Country = Feature<GeometryObject, CountryProp>;

export function useGeodata(slimUrl: string, fullUrl: string) {
  let _world: WorldAtlas | null = null;
  let _topo: Countries;

  let _slim: SlimData | null = null;
  let _full: Record<number, ProjectedEntry_[]> | null = null;
  const _fullClean: Record<number, ProjectedEntry[]> | null = null;

  const projection = geoNaturalEarth1();
  const path = geoPath().projection(projection);

  async function world(): Promise<WorldAtlas> {
    if (_world) return Promise.resolve(_world);
    _world = await GET<WorldAtlas>({ path: "countries-50m.json", keepPath: true });
    return _world;
  }

  async function topo(): Promise<Countries> {
    if (_topo) return Promise.resolve(_topo);
    const w = await world();
    _topo = feature<CountryProp>(w, w.objects.countries as GeometryCollection<CountryProp>);
    return _topo;
  }

  async function geo() {
    return {
      world: await world(),
      topo: await topo(),
      projection,
      path,
    };
  }

  async function slim(): Promise<SlimData> {
    if (_slim) return Promise.resolve(_slim);
    const req = await request({ method: "GET", path: slimUrl, keepPath: true });
    const places = await tableFromIPC<SlimPlacesSchema>(req.arrayBuffer());
    _slim = translateSlimTable(places);
    return _slim;
  }

  async function full(): Promise<Record<number, ProjectedEntry_[]>> {
    if (_full) return Promise.resolve(_full);
    const req = await request({ method: "GET", path: fullUrl, keepPath: true });
    const places = await tableFromIPC<FullPlacesSchema>(req.arrayBuffer());
    _full = translateFullTable(places, projection);
    return _full;
  }

  async function fullClean(): Promise<Record<number, ProjectedEntry[]>> {
    if (_fullClean) return Promise.resolve(_fullClean);
    const full_ = await full();

    function filterCount(entries: ProjectedEntry_[]) {
      const ret: Record<number, ProjectedEntry> = {};
      for (const entry of entries) {
        if (!!entry.xy) {
          if (entry.geonameid in ret) {
            ret[entry.geonameid].count += 1;
            ret[entry.geonameid].idxs.push(entry.idx);
          } else
            ret[entry.geonameid] = {
              ...(entry as ProjectedEntry__),
              count: 1,
              idxs: [entry.idx],
            };
        }
      }
      return Object.values(ret);
    }

    return Object.fromEntries(Object.entries(full_).map((entry) => [entry[0], filterCount(entry[1])]));
  }

  return {
    world,
    topo,
    path,
    projection,
    geo,

    slim,
    full,
    fullClean,
  };
}

/*
http://www.geonames.org/export/codes.html
Mapping of classes/codes to numeric `feature` column
{
  "A.": 0,
  "A.ADM1": 1,
  "A.ADM1H": 2,
  "A.ADM2": 3,
  "A.ADM2H": 4,
  "A.ADM3": 5,
  "A.ADM3H": 6,
  "A.ADM4": 7,
  "A.ADM4H": 8,
  "A.ADM5": 9,
  "A.ADM5H": 10,
  "A.ADMD": 11,
  "A.ADMDH": 12,
  "A.LTER": 13,
  "A.PCL": 14,
  "A.PCLD": 15,
  "A.PCLF": 16,
  "A.PCLH": 17,
  "A.PCLI": 18,
  "A.PCLIX": 19,
  "A.PCLS": 20,
  "A.PRSH": 21,
  "A.TERR": 22,
  "A.ZN": 23,
  "A.ZNB": 24,
  "H.": 25,
  "H.AIRS": 26,
  "H.ANCH": 27,
  "H.BAY": 28,
  "H.BAYS": 29,
  "H.BGHT": 30,
  "H.BNK": 31,
  "H.BNKR": 32,
  "H.BNKX": 33,
  "H.BOG": 34,
  "H.CAPG": 35,
  "H.CHN": 36,
  "H.CHNL": 37,
  "H.CHNM": 38,
  "H.CHNN": 39,
  "H.CNFL": 40,
  "H.CNL": 41,
  "H.CNLA": 42,
  "H.CNLB": 43,
  "H.CNLD": 44,
  "H.CNLI": 45,
  "H.CNLN": 46,
  "H.CNLQ": 47,
  "H.CNLSB": 48,
  "H.CNLX": 49,
  "H.COVE": 50,
  "H.CRKT": 51,
  "H.CRNT": 52,
  "H.CUTF": 53,
  "H.DCK": 54,
  "H.DCKB": 55,
  "H.DOMG": 56,
  "H.DPRG": 57,
  "H.DTCH": 58,
  "H.DTCHD": 59,
  "H.DTCHI": 60,
  "H.DTCHM": 61,
  "H.ESTY": 62,
  "H.FISH": 63,
  "H.FJD": 64,
  "H.FJDS": 65,
  "H.FLLS": 66,
  "H.FLLSX": 67,
  "H.FLTM": 68,
  "H.FLTT": 69,
  "H.GLCR": 70,
  "H.GULF": 71,
  "H.GYSR": 72,
  "H.HBR": 73,
  "H.HBRX": 74,
  "H.INLT": 75,
  "H.INLTQ": 76,
  "H.LBED": 77,
  "H.LGN": 78,
  "H.LGNS": 79,
  "H.LGNX": 80,
  "H.LK": 81,
  "H.LKC": 82,
  "H.LKI": 83,
  "H.LKN": 84,
  "H.LKNI": 85,
  "H.LKO": 86,
  "H.LKOI": 87,
  "H.LKS": 88,
  "H.LKSB": 89,
  "H.LKSC": 90,
  "H.LKSI": 91,
  "H.LKSN": 92,
  "H.LKSNI": 93,
  "H.LKX": 94,
  "H.MFGN": 95,
  "H.MGV": 96,
  "H.MOOR": 97,
  "H.MRSH": 98,
  "H.MRSHN": 99,
  "H.NRWS": 100,
  "H.OCN": 101,
  "H.OVF": 102,
  "H.PND": 103,
  "H.PNDI": 104,
  "H.PNDN": 105,
  "H.PNDNI": 106,
  "H.PNDS": 107,
  "H.PNDSF": 108,
  "H.PNDSI": 109,
  "H.PNDSN": 110,
  "H.POOL": 111,
  "H.POOLI": 112,
  "H.RCH": 113,
  "H.RDGG": 114,
  "H.RDST": 115,
  "H.RF": 116,
  "H.RFC": 117,
  "H.RFX": 118,
  "H.RPDS": 119,
  "H.RSV": 120,
  "H.RSVI": 121,
  "H.RSVT": 122,
  "H.RVN": 123,
  "H.SBKH": 124,
  "H.SD": 125,
  "H.SEA": 126,
  "H.SHOL": 127,
  "H.SILL": 128,
  "H.SPNG": 129,
  "H.SPNS": 130,
  "H.SPNT": 131,
  "H.STM": 132,
  "H.STMA": 133,
  "H.STMB": 134,
  "H.STMC": 135,
  "H.STMD": 136,
  "H.STMH": 137,
  "H.STMI": 138,
  "H.STMIX": 139,
  "H.STMM": 140,
  "H.STMQ": 141,
  "H.STMS": 142,
  "H.STMSB": 143,
  "H.STMX": 144,
  "H.STRT": 145,
  "H.SWMP": 146,
  "H.SYSI": 147,
  "H.TNLC": 148,
  "H.WAD": 149,
  "H.WADB": 150,
  "H.WADJ": 151,
  "H.WADM": 152,
  "H.WADS": 153,
  "H.WADX": 154,
  "H.WHRL": 155,
  "H.WLL": 156,
  "H.WLLQ": 157,
  "H.WLLS": 158,
  "H.WTLD": 159,
  "H.WTLDI": 160,
  "H.WTRC": 161,
  "H.WTRH": 162,
  "L.": 163,
  "L.AGRC": 164,
  "L.AMUS": 165,
  "L.AREA": 166,
  "L.BSND": 167,
  "L.BSNP": 168,
  "L.BTL": 169,
  "L.CLG": 170,
  "L.CMN": 171,
  "L.CNS": 172,
  "L.COLF": 173,
  "L.CONT": 174,
  "L.CST": 175,
  "L.CTRB": 176,
  "L.DEVH": 177,
  "L.FLD": 178,
  "L.FLDI": 179,
  "L.GASF": 180,
  "L.GRAZ": 181,
  "L.GVL": 182,
  "L.INDS": 183,
  "L.LAND": 184,
  "L.LCTY": 185,
  "L.MILB": 186,
  "L.MNA": 187,
  "L.MVA": 188,
  "L.NVB": 189,
  "L.OAS": 190,
  "L.OILF": 191,
  "L.PEAT": 192,
  "L.PRK": 193,
  "L.PRT": 194,
  "L.QCKS": 195,
  "L.RES": 196,
  "L.RESA": 197,
  "L.RESF": 198,
  "L.RESH": 199,
  "L.RESN": 200,
  "L.RESP": 201,
  "L.RESV": 202,
  "L.RESW": 203,
  "L.RGN": 204,
  "L.RGNE": 205,
  "L.RGNH": 206,
  "L.RGNL": 207,
  "L.RNGA": 208,
  "L.SALT": 209,
  "L.SNOW": 210,
  "L.TRB": 211,
  "P.": 212,
  "P.PPL": 213,
  "P.PPLA": 214,
  "P.PPLA2": 215,
  "P.PPLA3": 216,
  "P.PPLA4": 217,
  "P.PPLA5": 218,
  "P.PPLC": 219,
  "P.PPLCH": 220,
  "P.PPLF": 221,
  "P.PPLG": 222,
  "P.PPLH": 223,
  "P.PPLL": 224,
  "P.PPLQ": 225,
  "P.PPLR": 226,
  "P.PPLS": 227,
  "P.PPLW": 228,
  "P.PPLX": 229,
  "P.STLMT": 230,
  "R.": 231,
  "R.CSWY": 232,
  "R.OILP": 233,
  "R.PRMN": 234,
  "R.PTGE": 235,
  "R.RD": 236,
  "R.RDA": 237,
  "R.RDB": 238,
  "R.RDCUT": 239,
  "R.RDJCT": 240,
  "R.RJCT": 241,
  "R.RR": 242,
  "R.RRQ": 243,
  "R.RTE": 244,
  "R.RYD": 245,
  "R.ST": 246,
  "R.STKR": 247,
  "R.TNL": 248,
  "R.TNLN": 249,
  "R.TNLRD": 250,
  "R.TNLRR": 251,
  "R.TNLS": 252,
  "R.TRL": 253,
  "S.": 254,
  "S.ADMF": 255,
  "S.AGRF": 256,
  "S.AIRB": 257,
  "S.AIRF": 258,
  "S.AIRH": 259,
  "S.AIRP": 260,
  "S.AIRQ": 261,
  "S.AIRT": 262,
  "S.AMTH": 263,
  "S.ANS": 264,
  "S.AQC": 265,
  "S.ARCH": 266,
  "S.ARCHV": 267,
  "S.ART": 268,
  "S.ASTR": 269,
  "S.ASYL": 270,
  "S.ATHF": 271,
  "S.ATM": 272,
  "S.BANK": 273,
  "S.BCN": 274,
  "S.BDG": 275,
  "S.BDGQ": 276,
  "S.BLDA": 277,
  "S.BLDG": 278,
  "S.BLDO": 279,
  "S.BP": 280,
  "S.BRKS": 281,
  "S.BRKW": 282,
  "S.BSTN": 283,
  "S.BTYD": 284,
  "S.BUR": 285,
  "S.BUSTN": 286,
  "S.BUSTP": 287,
  "S.CARN": 288,
  "S.CAVE": 289,
  "S.CH": 290,
  "S.CMP": 291,
  "S.CMPL": 292,
  "S.CMPLA": 293,
  "S.CMPMN": 294,
  "S.CMPO": 295,
  "S.CMPQ": 296,
  "S.CMPRF": 297,
  "S.CMTY": 298,
  "S.COMC": 299,
  "S.CRRL": 300,
  "S.CSNO": 301,
  "S.CSTL": 302,
  "S.CSTM": 303,
  "S.CTHSE": 304,
  "S.CTRA": 305,
  "S.CTRCM": 306,
  "S.CTRF": 307,
  "S.CTRM": 308,
  "S.CTRR": 309,
  "S.CTRS": 310,
  "S.CVNT": 311,
  "S.DAM": 312,
  "S.DAMQ": 313,
  "S.DAMSB": 314,
  "S.DARY": 315,
  "S.DCKD": 316,
  "S.DCKY": 317,
  "S.DIKE": 318,
  "S.DIP": 319,
  "S.DPOF": 320,
  "S.EST": 321,
  "S.ESTO": 322,
  "S.ESTR": 323,
  "S.ESTSG": 324,
  "S.ESTT": 325,
  "S.ESTX": 326,
  "S.FCL": 327,
  "S.FNDY": 328,
  "S.FRM": 329,
  "S.FRMQ": 330,
  "S.FRMS": 331,
  "S.FRMT": 332,
  "S.FT": 333,
  "S.FY": 334,
  "S.FYT": 335,
  "S.GATE": 336,
  "S.GDN": 337,
  "S.GHAT": 338,
  "S.GHSE": 339,
  "S.GOSP": 340,
  "S.GOVL": 341,
  "S.GRVE": 342,
  "S.HERM": 343,
  "S.HLT": 344,
  "S.HMSD": 345,
  "S.HSE": 346,
  "S.HSEC": 347,
  "S.HSP": 348,
  "S.HSPC": 349,
  "S.HSPD": 350,
  "S.HSPL": 351,
  "S.HSTS": 352,
  "S.HTL": 353,
  "S.HUT": 354,
  "S.HUTS": 355,
  "S.INSM": 356,
  "S.ITTR": 357,
  "S.JTY": 358,
  "S.LDNG": 359,
  "S.LEPC": 360,
  "S.LIBR": 361,
  "S.LNDF": 362,
  "S.LOCK": 363,
  "S.LTHSE": 364,
  "S.MALL": 365,
  "S.MAR": 366,
  "S.MFG": 367,
  "S.MFGB": 368,
  "S.MFGC": 369,
  "S.MFGCU": 370,
  "S.MFGLM": 371,
  "S.MFGM": 372,
  "S.MFGPH": 373,
  "S.MFGQ": 374,
  "S.MFGSG": 375,
  "S.MKT": 376,
  "S.ML": 377,
  "S.MLM": 378,
  "S.MLO": 379,
  "S.MLSG": 380,
  "S.MLSGQ": 381,
  "S.MLSW": 382,
  "S.MLWND": 383,
  "S.MLWTR": 384,
  "S.MN": 385,
  "S.MNAU": 386,
  "S.MNC": 387,
  "S.MNCR": 388,
  "S.MNCU": 389,
  "S.MNFE": 390,
  "S.MNMT": 391,
  "S.MNN": 392,
  "S.MNQ": 393,
  "S.MNQR": 394,
  "S.MOLE": 395,
  "S.MSQE": 396,
  "S.MSSN": 397,
  "S.MSSNQ": 398,
  "S.MSTY": 399,
  "S.MTRO": 400,
  "S.MUS": 401,
  "S.NOV": 402,
  "S.NSY": 403,
  "S.OBPT": 404,
  "S.OBS": 405,
  "S.OBSR": 406,
  "S.OILJ": 407,
  "S.OILQ": 408,
  "S.OILR": 409,
  "S.OILT": 410,
  "S.OILW": 411,
  "S.OPRA": 412,
  "S.PAL": 413,
  "S.PGDA": 414,
  "S.PIER": 415,
  "S.PKLT": 416,
  "S.PMPO": 417,
  "S.PMPW": 418,
  "S.PO": 419,
  "S.PP": 420,
  "S.PPQ": 421,
  "S.PRKGT": 422,
  "S.PRKHQ": 423,
  "S.PRN": 424,
  "S.PRNJ": 425,
  "S.PRNQ": 426,
  "S.PS": 427,
  "S.PSH": 428,
  "S.PSN": 429,
  "S.PSTB": 430,
  "S.PSTC": 431,
  "S.PSTP": 432,
  "S.PYR": 433,
  "S.PYRS": 434,
  "S.QUAY": 435,
  "S.RDCR": 436,
  "S.RDIN": 437,
  "S.RECG": 438,
  "S.RECR": 439,
  "S.REST": 440,
  "S.RET": 441,
  "S.RHSE": 442,
  "S.RKRY": 443,
  "S.RLG": 444,
  "S.RLGR": 445,
  "S.RNCH": 446,
  "S.RSD": 447,
  "S.RSGNL": 448,
  "S.RSRT": 449,
  "S.RSTN": 450,
  "S.RSTNQ": 451,
  "S.RSTP": 452,
  "S.RSTPQ": 453,
  "S.RUIN": 454,
  "S.SCH": 455,
  "S.SCHA": 456,
  "S.SCHC": 457,
  "S.SCHL": 458,
  "S.SCHM": 459,
  "S.SCHN": 460,
  "S.SCHT": 461,
  "S.SECP": 462,
  "S.SHPF": 463,
  "S.SHRN": 464,
  "S.SHSE": 465,
  "S.SLCE": 466,
  "S.SNTR": 467,
  "S.SPA": 468,
  "S.SPLY": 469,
  "S.SQR": 470,
  "S.STBL": 471,
  "S.STDM": 472,
  "S.STNB": 473,
  "S.STNC": 474,
  "S.STNE": 475,
  "S.STNF": 476,
  "S.STNI": 477,
  "S.STNM": 478,
  "S.STNR": 479,
  "S.STNS": 480,
  "S.STNW": 481,
  "S.STPS": 482,
  "S.SWT": 483,
  "S.SYG": 484,
  "S.THTR": 485,
  "S.TMB": 486,
  "S.TMPL": 487,
  "S.TNKD": 488,
  "S.TOLL": 489,
  "S.TOWR": 490,
  "S.TRAM": 491,
  "S.TRANT": 492,
  "S.TRIG": 493,
  "S.TRMO": 494,
  "S.TWO": 495,
  "S.UNIP": 496,
  "S.UNIV": 497,
  "S.USGE": 498,
  "S.VETF": 499,
  "S.WALL": 500,
  "S.WALLA": 501,
  "S.WEIR": 502,
  "S.WHRF": 503,
  "S.WRCK": 504,
  "S.WTRW": 505,
  "S.ZNF": 506,
  "S.ZOO": 507,
  "T.": 508,
  "T.ASPH": 509,
  "T.ATOL": 510,
  "T.BAR": 511,
  "T.BCH": 512,
  "T.BCHS": 513,
  "T.BDLD": 514,
  "T.BLDR": 515,
  "T.BLHL": 516,
  "T.BLOW": 517,
  "T.BNCH": 518,
  "T.BUTE": 519,
  "T.CAPE": 520,
  "T.CFT": 521,
  "T.CLDA": 522,
  "T.CLF": 523,
  "T.CNYN": 524,
  "T.CONE": 525,
  "T.CRDR": 526,
  "T.CRQ": 527,
  "T.CRQS": 528,
  "T.CRTR": 529,
  "T.CUET": 530,
  "T.DLTA": 531,
  "T.DPR": 532,
  "T.DSRT": 533,
  "T.DUNE": 534,
  "T.DVD": 535,
  "T.ERG": 536,
  "T.FAN": 537,
  "T.FORD": 538,
  "T.FSR": 539,
  "T.GAP": 540,
  "T.GRGE": 541,
  "T.HDLD": 542,
  "T.HLL": 543,
  "T.HLLS": 544,
  "T.HMCK": 545,
  "T.HMDA": 546,
  "T.INTF": 547,
  "T.ISL": 548,
  "T.ISLET": 549,
  "T.ISLF": 550,
  "T.ISLM": 551,
  "T.ISLS": 552,
  "T.ISLT": 553,
  "T.ISLX": 554,
  "T.ISTH": 555,
  "T.KRST": 556,
  "T.LAVA": 557,
  "T.LEV": 558,
  "T.MESA": 559,
  "T.MND": 560,
  "T.MRN": 561,
  "T.MT": 562,
  "T.MTS": 563,
  "T.NKM": 564,
  "T.NTK": 565,
  "T.NTKS": 566,
  "T.PAN": 567,
  "T.PANS": 568,
  "T.PASS": 569,
  "T.PEN": 570,
  "T.PENX": 571,
  "T.PK": 572,
  "T.PKS": 573,
  "T.PLAT": 574,
  "T.PLATX": 575,
  "T.PLDR": 576,
  "T.PLN": 577,
  "T.PLNX": 578,
  "T.PROM": 579,
  "T.PT": 580,
  "T.PTS": 581,
  "T.RDGB": 582,
  "T.RDGE": 583,
  "T.REG": 584,
  "T.RK": 585,
  "T.RKFL": 586,
  "T.RKS": 587,
  "T.SAND": 588,
  "T.SBED": 589,
  "T.SCRP": 590,
  "T.SDL": 591,
  "T.SHOR": 592,
  "T.SINK": 593,
  "T.SLID": 594,
  "T.SLP": 595,
  "T.SPIT": 596,
  "T.SPUR": 597,
  "T.TAL": 598,
  "T.TRGD": 599,
  "T.TRR": 600,
  "T.UPLD": 601,
  "T.VAL": 602,
  "T.VALG": 603,
  "T.VALS": 604,
  "T.VALX": 605,
  "T.VLC": 606,
  "U.": 607,
  "U.APNU": 608,
  "U.ARCU": 609,
  "U.ARRU": 610,
  "U.BDLU": 611,
  "U.BKSU": 612,
  "U.BNKU": 613,
  "U.BSNU": 614,
  "U.CDAU": 615,
  "U.CNSU": 616,
  "U.CNYU": 617,
  "U.CRSU": 618,
  "U.DEPU": 619,
  "U.EDGU": 620,
  "U.ESCU": 621,
  "U.FANU": 622,
  "U.FLTU": 623,
  "U.FRZU": 624,
  "U.FURU": 625,
  "U.GAPU": 626,
  "U.GLYU": 627,
  "U.HLLU": 628,
  "U.HLSU": 629,
  "U.HOLU": 630,
  "U.KNLU": 631,
  "U.KNSU": 632,
  "U.LDGU": 633,
  "U.LEVU": 634,
  "U.MESU": 635,
  "U.MNDU": 636,
  "U.MOTU": 637,
  "U.MTU": 638,
  "U.PKSU": 639,
  "U.PKU": 640,
  "U.PLNU": 641,
  "U.PLTU": 642,
  "U.PNLU": 643,
  "U.PRVU": 644,
  "U.RDGU": 645,
  "U.RDSU": 646,
  "U.RFSU": 647,
  "U.RFU": 648,
  "U.RISU": 649,
  "U.SCNU": 650,
  "U.SCSU": 651,
  "U.SDLU": 652,
  "U.SHFU": 653,
  "U.SHLU": 654,
  "U.SHSU": 655,
  "U.SHVU": 656,
  "U.SILU": 657,
  "U.SLPU": 658,
  "U.SMSU": 659,
  "U.SMU": 660,
  "U.SPRU": 661,
  "U.TERU": 662,
  "U.TMSU": 663,
  "U.TMTU": 664,
  "U.TNGU": 665,
  "U.TRGU": 666,
  "U.TRNU": 667,
  "U.VALU": 668,
  "U.VLSU": 669,
  "V.": 670,
  "V.BUSH": 671,
  "V.CULT": 672,
  "V.FRST": 673,
  "V.FRSTF": 674,
  "V.GROVE": 675,
  "V.GRSLD": 676,
  "V.GRVC": 677,
  "V.GRVO": 678,
  "V.GRVP": 679,
  "V.GRVPN": 680,
  "V.HTH": 681,
  "V.MDW": 682,
  "V.OCH": 683,
  "V.SCRB": 684,
  "V.TREE": 685,
  "V.TUND": 686,
  "V.VIN": 687,
  "V.VINS": 688
}
*/
